generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ProductsStatistics {
  buyerRate Int
  soled     Int
  totalLike Int
  totalRate Int
  views     Int
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  phone         String    @unique
  name          String    @default("")
  family        String    @default("")
  address       String    @default("")
  state         String    @default("")
  city          String    @default("")
  code_meli     String    @default("")
  image         String    @default("")
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Ad {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String   @db.ObjectId
  status     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @db.Date

  @@map("product_ad")
}

model product_category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model product_description {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model product_images {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model product_packing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Product {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  main_cat        Main_cat           @relation(fields: [main_cat_id], references: [id])
  main_cat_id     String             @db.ObjectId
  specific_cat    Specific_cat       @relation(fields: [specific_cat_id], references: [id])
  specific_cat_id String             @db.ObjectId
  brand_id        String             @db.ObjectId
  brand           Brand              @relation(fields: [brand_id], references: [id])
  createdAt       DateTime           @db.Date
  image_url       String
  off_percent     Int
  price           Int
  selling_type    String
  statistics      ProductsStatistics
  status          Boolean
  title           String
  updatedAt       DateTime           @db.Date
  Ad              Ad[]
  CartItem        CartItem[]

  @@map("products")
}

model Main_cat {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  label        String
  image        String
  Product      Product[]
  Specific_cat Specific_cat[]

  @@map("products_main_categories")
}

model Specific_cat {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  main_cat     Main_cat  @relation(fields: [main_cat_id], references: [id], onDelete: Cascade)
  main_cat_id  String    @db.ObjectId
  products_id  String[]  @db.ObjectId
  title        String
  label        String
  single_image String
  hero_image   String
  Product      Product[]

  @@map("products_specific_categories")
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title_fr String
  title_en String
  image    String
  Product  Product[]

  @@map("products_brands")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}
