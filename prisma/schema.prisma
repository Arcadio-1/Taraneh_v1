generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type OrderAddress {
  address      String
  city         OrderAddressCity
  city_id      String
  house_number String
  id           String
  state        OrderAddressState
  state_id     String
  user_id      String
  zip_code     String
}

type OrderAddressCity {
  city_name String
  id        String
  state_id  String
}

type OrderAddressState {
  id         String
  state_name String
}

type OrderCart {
  createdAt            DateTime
  id                   String
  items                OrderCartItems[]
  size                 Int
  subDiscount          Int
  subTotalWithDiscount Int
  subtotal             Int
  updatedAt            DateTime
  userId               String
}

type OrderCartItems {
  cartId    String
  id        String
  product   OrderCartItemsProduct
  productId String
  quantity  Int
}

type OrderCartItemsProduct {
  brand_id        String
  createdAt       DateTime
  id              String
  image_url       String
  main_cat_id     String
  off_percent     Int
  price           Int
  selling_type    String
  specific_cat_id String
  statistics      OrderCartItemsProductStatistics
  status          Boolean
  title           String
  updatedAt       DateTime
}

type OrderCartItemsProductStatistics {
  buyerRate Int
  soled     Int
  totalLike Int
  totalRate Int
  views     Int
}

type OrderSelectedDate {
  // id            String
  day           Int
  dayOfyear     Int
  gregorianDate String
  holiday       Boolean
  month         Int
  month_name    String
  weekday       String
  year          Int
}

type OrderUser {
  code_meli String
  email     String
  family    String
  id        String
  image     String
  name      String
  phone     String
  role      String
}

model Order {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  user_id        String
  posting_price  Int
  payment_status Boolean
  payment_method PayMethod
  final_price    Int
  createdAt      DateTime          @default(now())
  status         OrderStatus
  address        OrderAddress
  cart           OrderCart
  selectedDate   OrderSelectedDate
  user           OrderUser

  @@map("orders")
}

type ProductsStatistics {
  buyerRate Int
  soled     Int
  totalLike Int
  totalRate Int
  views     Int
}

model Account {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?      @db.String
  access_token      String?      @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?      @db.String
  session_state     String?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserAddress       UserAddress? @relation(fields: [userAddressId], references: [id])
  userAddressId     String?      @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String       @unique
  userId        String       @db.ObjectId
  expires       DateTime
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserAddress   UserAddress? @relation(fields: [userAddressId], references: [id])
  userAddressId String?      @db.ObjectId

  @@map("sessions")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  REJECTED
  IN_PROCESS
  ON_DELIVERY
  DELIVERED
}

enum PayMethod {
  NOT_PAYED
  BANK_CART
  POS
  CRIDIT
  ORGANAZATION_CRIDIT
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  phone         String        @unique
  name          String        @default("")
  family        String        @default("")
  code_meli     String        @default("")
  image         String        @default("")
  email         String?       @unique
  emailVerified DateTime?
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  UserAddress   UserAddress[]
  State         State?        @relation(fields: [stateId], references: [id])
  stateId       String?       @db.ObjectId
  City          City?         @relation(fields: [cityId], references: [id])
  cityId        String?       @db.ObjectId

  @@map("users")
}

model UserAddress {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id      String    @unique @db.ObjectId
  address      String
  zip_code     String
  house_number String
  state_id     String    @db.ObjectId
  city_id      String    @db.ObjectId
  user         User      @relation(fields: [user_id], references: [id])
  state        State     @relation(fields: [state_id], references: [id])
  city         City      @relation(fields: [city_id], references: [id])
  Account      Account[]
  Session      Session[]

  @@map("userAddress")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Ad {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String   @db.ObjectId
  status     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @db.Date

  @@map("product_ad")
}

model product_category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model product_description {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model product_images {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model product_packing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Product {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  main_cat        Main_cat           @relation(fields: [main_cat_id], references: [id])
  main_cat_id     String             @db.ObjectId
  specific_cat    Specific_cat       @relation(fields: [specific_cat_id], references: [id])
  specific_cat_id String             @db.ObjectId
  brand_id        String             @db.ObjectId
  brand           Brand              @relation(fields: [brand_id], references: [id])
  createdAt       DateTime           @db.Date
  image_url       String
  off_percent     Int
  price           Int
  selling_type    String
  statistics      ProductsStatistics
  status          Boolean
  title           String
  updatedAt       DateTime           @db.Date
  Ad              Ad[]
  CartItem        CartItem[]

  @@map("products")
}

model Main_cat {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  label        String
  image        String
  Product      Product[]
  Specific_cat Specific_cat[]

  @@map("products_main_categories")
}

model Specific_cat {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  main_cat     Main_cat  @relation(fields: [main_cat_id], references: [id], onDelete: Cascade)
  main_cat_id  String    @db.ObjectId
  products_id  String[]  @db.ObjectId
  title        String
  label        String
  single_image String
  hero_image   String
  Product      Product[]

  @@map("products_specific_categories")
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title_fr String
  title_en String
  image    String
  Product  Product[]

  @@map("products_brands")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model State {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  state_name  String
  Cities      City[]
  User        User[]
  UserAddress UserAddress[]

  @@map("states")
}

model City {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  city_name   String
  state_id    String        @db.ObjectId
  state       State         @relation(fields: [state_id], references: [id], onDelete: Cascade)
  User        User[]
  UserAddress UserAddress[]

  @@map("cities")
}
